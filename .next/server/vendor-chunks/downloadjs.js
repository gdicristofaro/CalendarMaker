/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/downloadjs";
exports.ids = ["vendor-chunks/downloadjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/downloadjs/download.js":
/*!*********************************************!*\
  !*** ./node_modules/downloadjs/download.js ***!
  \*********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n(function(root, factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(this, function() {\n    return function download(data, strFileName, strMimeType) {\n        var self = window, defaultMime = \"application/octet-stream\", mimeType = strMimeType || defaultMime, payload = data, url = !strFileName && !strMimeType && payload, anchor = document.createElement(\"a\"), toString = function(a) {\n            return String(a);\n        }, myBlob = self.Blob || self.MozBlob || self.WebKitBlob || toString, fileName = strFileName || \"download\", blob, reader;\n        myBlob = myBlob.call ? myBlob.bind(self) : Blob;\n        if (String(this) === \"true\") {\n            payload = [\n                payload,\n                mimeType\n            ];\n            mimeType = payload[0];\n            payload = payload[1];\n        }\n        if (url && url.length < 2048) {\n            fileName = url.split(\"/\").pop().split(\"?\")[0];\n            anchor.href = url; // assign href prop to temp anchor\n            if (anchor.href.indexOf(url) !== -1) {\n                var ajax = new XMLHttpRequest();\n                ajax.open(\"GET\", url, true);\n                ajax.responseType = \"blob\";\n                ajax.onload = function(e) {\n                    download(e.target.response, fileName, defaultMime);\n                };\n                setTimeout(function() {\n                    ajax.send();\n                }, 0); // allows setting custom ajax headers using the return:\n                return ajax;\n            } // end if valid url?\n        } // end if url?\n        //go ahead and download dataURLs right away\n        if (/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)) {\n            if (payload.length > 1024 * 1024 * 1.999 && myBlob !== toString) {\n                payload = dataUrlToBlob(payload);\n                mimeType = payload.type || defaultMime;\n            } else {\n                return navigator.msSaveBlob ? navigator.msSaveBlob(dataUrlToBlob(payload), fileName) : saver(payload); // everyone else can save dataURLs un-processed\n            }\n        } else {\n            if (/([\\x80-\\xff])/.test(payload)) {\n                var i = 0, tempUiArr = new Uint8Array(payload.length), mx = tempUiArr.length;\n                for(i; i < mx; ++i)tempUiArr[i] = payload.charCodeAt(i);\n                payload = new myBlob([\n                    tempUiArr\n                ], {\n                    type: mimeType\n                });\n            }\n        }\n        blob = payload instanceof myBlob ? payload : new myBlob([\n            payload\n        ], {\n            type: mimeType\n        });\n        function dataUrlToBlob(strUrl) {\n            var parts = strUrl.split(/[:;,]/), type = parts[1], decoder = parts[2] == \"base64\" ? atob : decodeURIComponent, binData = decoder(parts.pop()), mx = binData.length, i = 0, uiArr = new Uint8Array(mx);\n            for(i; i < mx; ++i)uiArr[i] = binData.charCodeAt(i);\n            return new myBlob([\n                uiArr\n            ], {\n                type: type\n            });\n        }\n        function saver(url, winMode) {\n            if (\"download\" in anchor) {\n                anchor.href = url;\n                anchor.setAttribute(\"download\", fileName);\n                anchor.className = \"download-js-link\";\n                anchor.innerHTML = \"downloading...\";\n                anchor.style.display = \"none\";\n                document.body.appendChild(anchor);\n                setTimeout(function() {\n                    anchor.click();\n                    document.body.removeChild(anchor);\n                    if (winMode === true) {\n                        setTimeout(function() {\n                            self.URL.revokeObjectURL(anchor.href);\n                        }, 250);\n                    }\n                }, 66);\n                return true;\n            }\n            // handle non-a[download] safari as best we can:\n            if (/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n                if (/^data:/.test(url)) url = \"data:\" + url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n                if (!window.open(url)) {\n                    if (confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")) {\n                        location.href = url;\n                    }\n                }\n                return true;\n            }\n            //do iframe dataURL download (old ch+FF):\n            var f = document.createElement(\"iframe\");\n            document.body.appendChild(f);\n            if (!winMode && /^data:/.test(url)) {\n                url = \"data:\" + url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n            }\n            f.src = url;\n            setTimeout(function() {\n                document.body.removeChild(f);\n            }, 333);\n        } //end saver\n        if (navigator.msSaveBlob) {\n            return navigator.msSaveBlob(blob, fileName);\n        }\n        if (self.URL) {\n            saver(self.URL.createObjectURL(blob), true);\n        } else {\n            // handle non-Blob()+non-URL browsers:\n            if (typeof blob === \"string\" || blob.constructor === toString) {\n                try {\n                    return saver(\"data:\" + mimeType + \";base64,\" + self.btoa(blob));\n                } catch (y) {\n                    return saver(\"data:\" + mimeType + \",\" + encodeURIComponent(blob));\n                }\n            }\n            // Blob but not URL support:\n            reader = new FileReader();\n            reader.onload = function(e) {\n                saver(this.result);\n            };\n            reader.readAsDataURL(blob);\n        }\n        return true;\n    }; /* end download() */ \n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/downloadjs/download.js\n");

/***/ })

};
;